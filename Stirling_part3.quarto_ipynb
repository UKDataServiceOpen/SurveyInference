{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: Statistical inference using weights and survey design\n",
        "subtitle: 3. R and Stata examples\n",
        "author: Pierre Walth√©ry\n",
        "date: today\n",
        "date-format: MMMM YYYY\n",
        "mainfont: Arial\n",
        "sansfont: Arial\n",
        "embed-resources: true\n",
        "resource-path: \n",
        "       - pics/\n",
        "jupyter: stata\n",
        "execute:\n",
        "  engine: knitr\n",
        "\n",
        "format:\n",
        "# pdf:\n",
        "#     latex-tinytex: true\n",
        "#     pdf-engine: lualatex\n",
        "  revealjs:\n",
        "     institute: UK Data Service\n",
        "     scrollable: true\n",
        "     theme: [default, tooling.scss]\n",
        "     header: Statistical inference using weights and survey design\n",
        "\n",
        "     header-logo: UKDS_Logos_Col_Grey_300dpi.png\n",
        "     embed-resources: true\n",
        "    \n",
        "execute: \n",
        "   echo: true\n",
        "   eval: true\n",
        "\n",
        "filters:\n",
        "  - reveal-header\n",
        "\n",
        "---\n",
        "\n",
        "## Plan\n",
        " <!-- If rendering of this script returns an error  --> \n",
        " <!-- run quarto add shafayetShafee/reveal-header\n",
        " <!-- In the project  directory -->\n",
        "-   Three sessions:\n",
        "\n",
        "  1. Survey design: a refresher\n",
        "\n",
        "  2. Inference in theory and practice \n",
        "\n",
        "  **3.  R and Stata examples**\n",
        "\n",
        "## This session  \n",
        "\n",
        "1.  R vs Stata Speak\n",
        "\n",
        "2.  Means, proportions and CI\n",
        "\n",
        "3.  When survey design variables are not present\n",
        "\n",
        "##  Data requirements\n",
        "\n",
        "- An up to date  copy of R (with the `dplyr`,  `haven`,  `survey` and `Hmisc` packages installed) or Stata  \n",
        "- An active account with UKDS (for downloading the datasets)\n",
        "- We will  use data from:\n",
        "\n",
        "  - The  [2017 British Social Attitudes Survey (BSA)](https://beta.ukdataservice.ac.uk/datacatalogue/studies/study?id=8450): \n",
        "  \n",
        "      https://beta.ukdataservice.ac.uk/datacatalogue/studies/study?id=8450 \n",
        "  - The [April-June 2022 Quarterly Labour Force Survey](https://beta.ukdataservice.ac.uk/datacatalogue/studies/study?id=8999#!/access-data):\n",
        "  \n",
        "      https://beta.ukdataservice.ac.uk/datacatalogue/studies/study?id=8999\n",
        "  \n",
        "\n",
        "\n",
        "# 1.  R vs Stata speak\n",
        "## Survey design in R\n",
        "- The R *Survey* package [@Lumley2023] provides a comprehensive set of functions for computing  point and variance estimates from survey data.  \n",
        "\n",
        "- Overall logic:\n",
        "  - Install the `survey` packages and load it into memory\n",
        "  - Declare the survey design: ie create a `svydesign` object from the  data\n",
        "  \n",
        "  ```\n",
        "         mydata.s<-svydesign(id=~psu_var,\n",
        "                             strata=~strata_var, \n",
        "                             weights=weight_var,\n",
        "                             mydata)`\n",
        "```      \n",
        "  - Compute estimates with survey-specific functions: `svymean(myvar,mydata.s)`, `svytab(myvar,mydata.s)`, etc\n",
        "\n",
        "## Survey weights in R\n",
        "- R  does not provide a unified set of functions or syntax  for computing weighted estimates. \n",
        "- Implementation of weighting may vary between packages, but algorithms are usually  described in detail in  package documentation. \n",
        "- R Base has only one weight-aware function: `weighted.mean()`\n",
        "- The Hmisc package offers a more comprehensive set of weighted estimation functions:\n",
        "\n",
        "  - `wtd.mean()`\n",
        "  - `wtd.var()`\n",
        "  - `wtd.quantile()`\n",
        "\n",
        "- Confidence intervals and standard errors still have to be computed manually\n",
        "\n",
        "## Survey design in Stata\n",
        "\n",
        "- Stata provides comprehensive support for computing survey design-informed  estimates from survey data\n",
        "- Implementation logic similar to R:\n",
        "\n",
        "  - Declare the survey design using svyset\n",
        "  \n",
        "    - `svyset id=psu_var [pweights=weight_var],strata(strata_var)`\n",
        "    \n",
        "  - Use `svy:` - prefixed commands for estimation:\n",
        "  \n",
        "    - `svy:mean myvar`, `svy:tab myvar` etc...\n",
        "\n",
        "## Survey weights in Stata - 1\n",
        "\n",
        "- Users may add sampling weights to most Stata estimation commands, or use survey-specific commands. The latter is recommended. \n",
        "\n",
        "- Stata distinguishes between four kinds of (dealing with) weights: \n",
        "\n",
        "  - frequency weights (`fweight`), \n",
        "  - analytical weights (`aweight`), \n",
        "  - importance weights (`iweight`) and \n",
        "  - probability weights (`pweight`). \n",
        "\n",
        "- These mostly differ in the way standard errors are computed \n",
        "\n",
        "\n",
        "## Survey weights in Stata -2 \n",
        "\n",
        "- Survey weights should be treated as *probability weights* or `pw`. \n",
        "\n",
        "- Key estimation commands, such as `summarise` or `tab` do not allow using `pw`:  this is to nudge users to rely on the `svy:` commands instead\n",
        ".\n",
        "- 'On the fly' weighting (i.e. not using survey design functions) in Stata consists in the weighting variables being specified between square brackets. \n",
        "\n",
        "    - `stata_command myvar [pw=weight_var]`\n",
        "\n",
        "- It is tempting to to specify instead the wrong  kind of weights function  (`fw` or `aw`) if one does not wish to use the survey design functions. You may get the correct point estimates, but your standard errors are likely to be incorrect  Do this at your own risk\n",
        "\n",
        "# 2.  Means, proportions and CI\n",
        "\n",
        "\n",
        "## Identifying the survey design \n",
        "\n",
        "We first need to find out about the survey design that was used in the 2017 BSA, and the design variables that are made available in the dataset. Such information can usually be found in the documentation that comes together with the data under the `mrdoc/pdf` folder. \n",
        "\n",
        "**Question 1**\n",
        "\n",
        "- What is the design that was used in this survey (i.e. how many stages were there, and what were the units sampled)? - What were the primary sampling units; the strata (if relevant)?\n",
        "\n",
        "\n",
        "## Finding  the survey design variables \n",
        "\n",
        "Now that we are a bit more familiar with the way the survey was designed, we need to try and identify the design \n",
        "variables available in the dataset. The information can usually be found in the user manual or the data dictionary available under `mrdoc/ukda_data_dictionaries.zip` The file may need to be decompressed  separately.\n",
        "\n",
        "**Question 2**\n",
        "\n",
        "- What survey design variables are available? \n",
        "- Are there any that are missing -- if so which ones? \n",
        "- What is the name of the weights variables?\n",
        "\n",
        "## Preparing the data - R  \n",
        "\n",
        "```{r}\n",
        "rm(list=ls())\n",
        "library(dplyr)                                                              ### Data manipulation functions\n",
        "library(haven)                                                              ### Importing stata/SPSS files\n",
        "library(Hmisc)                                                              ### Extra statistical functions\n",
        "library(survey)                                                             ### Survey design functions\n",
        "\n",
        "setwd(\"~/OneDrive/trainings/Stirling_Nov24/\")                               ### Edit as appropriate\n",
        "datadir<-\"~/OneDrive/data/\"                                                 ### Edit as appropriate\n",
        "bsa17<-read_dta(paste0(datadir,\"bsa/UKDA-8450-stata/bsa2017_for_ukda.dta\")) ### Importing Stata format dataset\n",
        "dim(bsa17)\n",
        "```\n",
        "\n",
        "- We can now specify the survey design using:\n",
        "\n",
        "  - `Spoint` as Primary Sampling Unit, \n",
        "  - `StratID` as strata, \n",
        "  - `WtFactor` as weights. \n",
        "\n",
        "##  Specifying the survey design in R\n",
        "\n",
        "- We create a `svydesign` object, i.e. a survey design informed copy of the data, which will be used for  subsequent estimation.\n",
        "\n",
        "\n",
        "```{r 5_2}\n",
        "bsa17.s<-svydesign(ids=~Spoint, \n",
        "                   strata=~StratID, \n",
        "                   weights=~WtFactor,\n",
        "                   data=bsa17)        ### Specifying the survey design\n",
        "class(bsa17.s)                        ### Examining the svydesign object                                        \n",
        "summary(bsa17.s)                      ### ... And looking at its content\n",
        "```\n",
        "\n",
        "\n",
        "## Mean age and its 95% confidence interval\n",
        "- We can now produce a first set of estimates using the  survey designinformation. We begin with the mean age of respondents in the sample. \n",
        "\n",
        "- We will need to use `svymean()`\n",
        "\n",
        "```{r mean}\n",
        "svymean(~RAgeE,bsa17.s)\n",
        "```\n",
        "\n",
        " By default  `svymean()` computes the standard error of the mean. We need to  \n",
        " embed it within `confint()` in order to get a confidence interval. \n",
        "\n",
        "\n",
        "```{r 5_3}\n",
        "confint(                                  ### Computing the confidence interval...\n",
        "  svymean(~RAgeE,bsa17.s)                 ### And the mean\n",
        "  )                   \n",
        "\n",
        "round(                                    ### Rounding the results to one decimal point\n",
        "  c(\n",
        "    svymean(~RAgeE,bsa17.s),              ### Computing the mean...\n",
        "    confint(svymean(~RAgeE,bsa17.s))      ### And its 95% CI\n",
        "    ),\n",
        "  1) \n",
        "```\n",
        "\n",
        "## Question 3\n",
        "- What would be the consequences of:\n",
        "  - weighing but not accounting for the sample design; \n",
        "  - not using  weights and accounting for the sample design...\n",
        "\n",
        "- When: \n",
        "  - inferring the mean value of the population age?\n",
        "  - computing the uncertainty  of the  estimate of  population age? \n",
        "\n",
        "## Answer - 1\n",
        "\n",
        "- When using on the spot weighting, we need to compute means and CI separately: \n",
        "\n",
        "\n",
        "```{r}\n",
        "a.m<-wtd.mean(                               ### Weighted mean function from Hmisc\n",
        "  bsa17$RAgeE,\n",
        "  bsa17$WtFactor,\n",
        "  normwt = T)                                ### Option specific to survey weights  \n",
        "\n",
        "### Computation of the standard error by hand...\n",
        "a.se<-sqrt(\n",
        "          wtd.var(bsa17$RAgeE,               ### ... using the weighted variance function from Hmisc\n",
        "                  bsa17$WtFactor,\n",
        "                  normwt = T)\n",
        "          )/\n",
        "       sqrt(\n",
        "         nrow(bsa17)                         ### ... shortcut to sample size\n",
        "         )\n",
        "\n",
        "c(a.m,                                       ### Concatenating the mean..\n",
        "  a.m-1.96*a.se,                             ### ... the lowbound of the CI\n",
        "  a.m+1.96*a.se)                             ### ... and the higher bound\n",
        "```\n",
        "\n",
        "\n",
        " \n",
        "- Unweighted estimates:\n",
        "\n",
        "\n",
        "```{r}\n",
        "ua.m<-mean(bsa17$RAgeE)                     ### mean() function from R Base\n",
        "  \n",
        "ua.se<-sd(bsa17$RAgeE)/                     ### ... standard errors\n",
        "      sqrt(nrow(bsa17))    ##\n",
        "\n",
        "c(ua.m,                                     ### and putting it all together\n",
        "  ua.m-1.96*ua.se,\n",
        "  ua.m+1.96*ua.se\n",
        "  )\n",
        "\n",
        "```\n",
        "\n",
        "\n",
        "## Answer - 2\n",
        "\n",
        "- Not using weights results in  overestimating the mean age in the population (of those aged 18+) by about 4 years. \n",
        "- This is likely to be due to the fact that older respondents are more likely to take part to surveys. \n",
        "- Using `on the fly` weights does not alter the value of the estimated population mean when compared with SD informed estimates...\n",
        "- But would lead us to overestimating the precision/underestimate the uncertainty of our estimate -- by about plus or minus 3 months. \n",
        "\n",
        "## Stata version\n",
        "- Opening the dataset and declaring the survey design"
      ],
      "id": "bce73fcb"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "use ~/OneDrive/data/bsa/UKDA-8450-stata/bsa2017_for_ukda.dta,clear\n",
        "\n",
        "svyset Spoint [pw=WtFactor], strata(StratID) "
      ],
      "id": "c8621b50",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "##\n",
        "- Computing the survey design-informed  version of the mean...\n"
      ],
      "id": "fa8407a5"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "svy: mean RAgeE"
      ],
      "id": "0c151e52",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## \n",
        "- And the other two: "
      ],
      "id": "6decdbb7"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "mean RAgeE [pw=WtFactor]\n",
        "mean RAgeE"
      ],
      "id": "81ff3a1c",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Computing a proportion and its 95% confidence interval\n",
        "- We can similarly estimate the distribution of a categorical variable in the population by estimating proportions (or percentages)\n",
        "- Let's look at the proportion of people who declare that they are interested in politics. \n",
        "- This is the `Politics` variable in the BSA. \n",
        "- It has five categories ranging from 1 'A great deal' to 5- 'Not at all'.\n",
        "- We could recode 1 and 2 `A great deal` and `quite a lot` into 'Significantly', but since we are only interested in estimating the confidence intervals, we will select the relevant values 'on the go'. \n",
        "\n",
        "## Let's explore the variable\n",
        "- Phrasing of the question:\n",
        "\n",
        "```{r 5_4_1} \n",
        "attr(bsa17$Politics,\"label\")     \n",
        "```\n",
        "\n",
        "\n",
        "- Value labels:\n",
        "\n",
        "```{r 5_4_2}\n",
        "attr(bsa17$Politics,\"labels\")     \n",
        "```\n",
        "\n",
        "- Sample distribution\n",
        "\n",
        "\n",
        "```{r 5_4_3}\n",
        "table(\n",
        "  droplevels(\n",
        "             as_factor(bsa17$Politics)\n",
        "             )\n",
        "  ) \n",
        "``` \n",
        "\n",
        "\n",
        "##\n",
        "- Neater output\n",
        "\n",
        "```{r 5_5}\n",
        "round(\n",
        "  100*\n",
        "    prop.table(\n",
        "      svytable(~(Politics==1 | Politics==2),bsa17.s)\n",
        "      ),\n",
        "  1)\n",
        "```\n",
        "\n",
        "- Let us now estimate the confidence intervals for  these proportions. Traditional statistical software usually does  this without showing us  what is happening under the bonnet. \n",
        "R requires more coding, but also a better understanding of what is actually estimated. \n",
        "\n",
        "- Confidence intervals for proportions of categorical variables are in fact  computed as a sequence of binomial/dichotomic estimations -- i.e. one for each category. \n",
        "\n",
        "##\n",
        "- In R this is  specified explicitly via the `svyciprop()` and `I()` functions:\n",
        "\n",
        "  - The former computes the proportion and its confidence interval (by default 95%)...\n",
        "  - whereas the latter allows us to define the category of interest.\n",
        "\n",
        "\n",
        "```{r 5_6_1}\n",
        "p<-svyciprop(~I(Politics==1 | Politics==2),bsa17.s)\n",
        "p\n",
        "```                     \n",
        "\n",
        "\n",
        "- A neater version:\n",
        "\n",
        "```{r 5_6_2}\n",
        "round(100*\n",
        "        c(p[1],\n",
        "attr(p,\"ci\")),\n",
        "1\n",
        ")\n",
        "```\n",
        "\n",
        "\n",
        "## Question 4\n",
        "- What is the proportion of respondents aged 17-34 in the sample, as well as its 95% confidence interval? \n",
        "\n",
        "  - You can use `RAgecat5`\n",
        "\n",
        "## Answer\n",
        "- The proportion of 17-34 year old in the sample is: \n",
        "\n",
        "\n",
        "```{r} \n",
        "a<-svyciprop(~I(RAgecat5 == 1),bsa17.s)\n",
        "\n",
        "round(\n",
        "  100*\n",
        "      a[1],1)\n",
        "```\n",
        "\n",
        "and its 95% confidence interval:                 \n",
        "\n",
        "```{r} \n",
        "round(\n",
        "    100*\n",
        "    attr(a,\"ci\"),\n",
        "    1)\n",
        "```\n",
        "\n",
        "\n",
        "## Stata\n",
        "\n",
        "* Proportions and Question 4"
      ],
      "id": "7ca77e55"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "recode Politics 1 2 =1 3/8=2,gen(Politics2)\n",
        "svy:ta Politics2\n",
        "svy:ta Politics2, percent ci\n",
        "svy:ta RAgecat5, percent ci"
      ],
      "id": "941cdf1b",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Computing domain estimates -1 \n",
        "- Computing estimates for subpopulation adds a layer of complexity to the above example. \n",
        "- Weights are usually  designed to make the  full  sample representative of the population\n",
        "- Computing estimates for part of the sample only, therefore using a fraction of these weights may affect the estimates. \n",
        "- It is recommended to use commands that take into account the entire distribution of the weights instead.\n",
        "\n",
        "In R, the command that does this is `svyby()`\n",
        "\n",
        "## Computing domain estimates - 2\n",
        "\n",
        "- Say we would like to compute the mean age of BSA respondents by Government Office Regions, we need to specify:\n",
        "\n",
        "  - The outcome variable whose estimate we want to compute: i.e. `RAgeE`\n",
        "  - The grouping variable(s) `GOR_ID`\n",
        "  - The estimate function we are going to use here: `svymean`, the same as  we used before\n",
        "  - And the type of type of variance estimation we would like to see displayed i.e. standard errors or confidence interval  \n",
        "\n",
        "##\n",
        "\n",
        "```{r 5.7}\n",
        "d<-      svyby(~RAgeE,\n",
        "             by=~as_factor(GOR_ID),\n",
        "             svymean,\n",
        "             design=bsa17.s,\n",
        "             vartype = \"ci\")\n",
        "round(d[-1],1)\n",
        "```\n",
        "\n",
        "  *Note:* we used `[-1]` above  in order to remove a column with alphanumeric values (the region names), so that we could round the results without getting an error.\n",
        "\n",
        "##\n",
        "-  Results  suggest that: \n",
        "\n",
        "   - the population in  London is among the youngest in the country;\n",
        "   - those in the South West are among the oldest -- their respective 95% confidence intervals do not overlap. \n",
        "   - The same cannot be said of differences between London and the South East, as the CIs partially overlap.\n",
        "\n",
        "- We can adopt  a similar approach with proportions: we just need to specify the category of the variable we are interested in as an outcome, for instance respondents who are significantly interested in politics, and replace `svymean` by `svyciprop`.\n",
        "\n",
        "##\n",
        "\n",
        "```{r 5.8}\n",
        "c<-round(\n",
        "      100*\n",
        "      svyby(~I(Politics==1 | Politics==2),\n",
        "            by=~as_factor(GOR_ID),\n",
        "            svyciprop,\n",
        "            design=bsa17.s,\n",
        "            vartype = \"ci\")[-1],\n",
        "            1)\n",
        "c\n",
        "```\n",
        "\n",
        "## Question 5\n",
        "- What is the 95% confidence interval for the proportion of people interested in politics in the North East? \n",
        "- Is the proportion likely to be different in London? In what way? \n",
        "- What is the region of the UK for which the precision of the estimates is likely to be the smallest?\n",
        "\n",
        "## Answer\n",
        "\n",
        "- The 95% confidence interval for the proportion of people very interested in politics in the North East is  `r as.numeric(c[1,2:3])`. \n",
        "- By contrast, it is  `r as.numeric(c[7,2:3])` in London. \n",
        "- The region with the lowest precision of estimates (i.e. the widest confidence interval) is Wales, with more than   20  percentage point difference between the upper and lower bounds of the confidence interval.\n",
        "\n",
        "## Question 6\n",
        "- Using interest in politics as before, and three category age `RAgecat5`: \n",
        "\n",
        "  - Produce a table showing the proportion of respondents significantly interested in Politics by age group and gender\n",
        "  - Assess whether the age difference in interest for politics is similar for each gender.\n",
        "  - Based on the data, is it fair to say that men aged under 35 tend to  be more likely to declare  themselves  interested  in politics  than women aged 55 and above?\n",
        "\n",
        "## Question 6\n",
        "\n",
        "\n",
        "```{r 6.1}\n",
        "round(\n",
        "      100*\n",
        "        svyby(~I(Politics==1 | Politics==2),\n",
        "              by=~as_factor(RAgecat5)+as_factor(Rsex),\n",
        "              svyciprop,\n",
        "              design=bsa17.s,\n",
        "              vartype = \"ci\")[c(-8,-4),c(-2,-1)],1)\n",
        "``` \n",
        "\n",
        "- Older respondents both male and female tend to be more involved in politics than younger ones.\n",
        "\n",
        "- The confidence interval for the proportion of men under 35 and women above 55 interested in politics overlaps; it is unlikely that they  differ in the population.\n",
        "\n",
        "## Stata\n",
        "\n",
        "\n",
        "# 3 Correcting for the absence of survey design variables \n",
        "\n",
        "##  Regional employed population with the End User License LFS\n",
        "- We are using the Quarterly Labour Force Survey, April-July 2022 issue. \n",
        "- As a rule, EUL versions of the LFS do not include survey  design variables. \n",
        "- The LFS   come with  two weight variables:\n",
        "\n",
        "  - `pwt22` for estimation with the whole sample\n",
        "  - `piwt22` for estimation of earnings using  respondents currently in employment (and accounting for  the high level of non response for the earnings variables) \n",
        "\n",
        "- Estimation without  accounting for sample design will likely be biased and should be reported as such including warnings, even if its nature (over or underestimation) and size are not known. \n",
        "##\n",
        "- An alternative is to look for design effects tables published by the data producer which could be used to correct for the bias.\n",
        "\n",
        "- The Office for National Statistics regularly publishes Deft tables for the LFS, but only  for their headline statistics.  \n",
        "- Let's first produce uncorrected 'naive' estimates of the regional population.\n",
        "- We will still use the survey design functions, but define a SRS design \n",
        "\n",
        "    \n",
        "\n",
        "```{r  5.9}\n",
        "lfs<-read_dta((paste0(datadir,\"lfs/UKDA-8999-stata/lfsp_aj22_eul_pwt22.dta\")))%>%\n",
        "     select(PWT22,PIWT22,GOVTOF2,URESMC,ILODEFR)\n",
        "lfs.s<-svydesign(ids=~1,weights=~PIWT22,data=lfs%>%filter(ILODEFR==1)) \n",
        "nv<-round(confint(svytotal(~as_factor(GOVTOF2),lfs.s)))\n",
        "```\n",
        "\n",
        "\n",
        "![Test](pics/lfs_vol1_SE.png)\n",
        "\n",
        "For some reason, the  variable  for Government Office Region  - GOVTOF - used by the ONS differentiates Merseyside, and not the one we have in the data. We therefore need to recode the  original variable accordingly, using another, more detailed variable.\n",
        "We also have to r\n",
        "\n",
        "```{r 5.10}\n",
        "lfs<-lfs%>%mutate(govtof=ifelse(URESMC==15,3,GOVTOF2)) # Identifying Merseyside\n",
        "lfs$govtof.f<-as.ordered(lfs$govtof)                   # Converting into factor\n",
        "levels(lfs$govtof.f)<-c(names(attr((lfs$GOVTOF2),\"labels\")[3:4]),\"Merseyside\",names(attr((lfs$GOVTOF2),\"labels\")[5:14])) # Adding factor levels from existing labels\n",
        "table(lfs$govtof.f)                      \n",
        "```\n",
        "\n",
        "Let us now check the results:\n",
        "\n",
        "\n",
        "```{r 5.12}\n",
        "lfs.s<-svydesign(ids=~1,weights=~PIWT22,data=lfs%>%filter(ILODEFR==1)) \n",
        "round(\n",
        "  confint(\n",
        "    svytotal(~govtof.f,lfs.s)\n",
        "    )\n",
        "  )\n",
        "```\n",
        "\n",
        "\n",
        "We can now import the design factors from the LFS documentation. This has to be done by hand, by  copying the relevant values of the design factors. \n",
        "\n",
        "\n",
        "\n",
        "```{r 5.13}\n",
        "tot<-data.frame(svytotal(~govtof.f,lfs.s))\n",
        "tot$deft<-c(0.8712,1.0857,1.3655,1.0051,0.9634,\n",
        "            1.0382,0.8936,1.3272,0.9677,0.9137,\n",
        "            1.0012,1.0437,0.7113)\n",
        "tot[\"2.5%\"]<-tot$total-(1.96*tot$SE*tot$deft)\n",
        "tot[\"97.5%\"]<-tot$total+(1.96*tot$SE*tot$deft)\n",
        "# Cleaning up the labels\n",
        "rownames(tot)<-substr(rownames(tot),9,nchar(rownames(tot)))\n",
        "```\n",
        "\n",
        "\n",
        "\n",
        "- Any comments: pierre.walthery@manchester.ac.uk"
      ],
      "id": "4ebd5559"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "stata",
      "language": "stata",
      "display_name": "Stata",
      "path": "/home/mscsepw2/.local/share/jupyter/kernels/stata"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}